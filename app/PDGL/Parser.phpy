// vim: syntax=yacc noexpandtab

%pure_parser
%expect 6

%token T_FINAL
%token T_CLASS
%token T_EXTENDS
%token T_IMPLEMENTS
%token T_DIRECT
%token T_VAL
%token T_VAR

%token T_TRIPLE_BACKQUOTE
%token T_COLON_ASSIGN
%token T_ARROW_ASSIGN

%token T_LITERAL
%token T_NUMBER

%token T_STRING_SQ
%token T_STRING_DQ

%%

file
	: file_stmts	{ $$ = new Model\File(['fields' => $1]); }
	;

file_stmts
	: file_stmt				{ $$ = [$1]; }
	| file_stmts file_stmt	{ $$ = array_merge($1, [$2]); }
	|						{ $$ = []; }
	;

file_stmt
	: class
	;

class
	: class_mods T_CLASS T_LITERAL class_ext_impls '{' class_stmts '}'
		{
            $$ = new Model\Class_([
                'name' => $3,

                'data'       => ($1 & 4) !== false,
                'final'      => ($1 & 1) !== false,
                'finalFinal' => ($1 & 2) !== false,

                'extends'    => $4['extends'],
                'implements' => $4['implements'],

                'fields' => $6
            ]);
		}
	;

class_mods
	:				{ $$ = 0; }
	| T_FINAL		{ $$ = 1; }
	| T_FINAL '!'	{ $$ = 3; }
	;

class_ext_impls
	: class_extends class_implements	{ $$ = ['extends' => $1, 'implements' => $2]; }
	| class_implements class_extends	{ $$ = ['extends' => $2, 'implements' => $1]; }
	;

class_extends
	:						{ $$ = null; }
	| T_EXTENDS class_name	{ $$ = $2; }
	;

class_implements
	:								{ $$ = []; }
	| T_IMPLEMENTS class_names_list	{ $$ = $2; }
	;

class_name
	: T_LITERAL
	| '\\' T_LITERAL			{ $$ = '\\'.$2; }
	| class_name '\\' T_LITERAL	{ $$ = $1.'\\'.$3; }
	;

class_names_list
	: class_name						{ $$ = [$1]; }
	| class_names_list ',' class_name	{ $$ = array_merge($1, $3); }
	;

class_stmts
	: class_stmt				{ $$ = [$1]; }
	| class_stmts class_stmt	{ $$ = array_merge($1, $2); }
	|							{ $$ = []; }
	;

class_stmt
	: field
	;

field
	: field_mods field_keyword T_LITERAL field_type field_defval ';'
		{
            $$ = new Model\Field([
                'name' => $3,

                'editable' => $2,
                'direct'   => ($1 & 1) !== false,

                'type' => $4,

                'directDefining' => ($5['assign'] & 2) !== false,
                'filterDefault'  => ($5['assign'] & 1) !== false,
                'default'        => $this->parsePHP($5['value'])
            ]);
		}
	;

field_mods
	:			{ $$ = 0; }
	| T_DIRECT	{ $$ = 1; }
	;

field_keyword
	: T_VAL	{ $$ = false; }
	| T_VAR	{ $$ = true; }
	;

field_type
	:						{ $$ = new Type('mixed', false); }
	| ':' field_typename	{ $$ = $2; }
	;

field_typename
	: class_name		{ $$ = new Type($1, false); }
	| class_name '?'	{ $$ = new Type($1, true); }
	;

field_defval
	:	{ $$ = ['assign' => 1, 'value' => null]; }

	| assign field_defval_contents
		{
            $$ = [
                'assign' => $1,
                'value'  => $2,
            ];
		}
	;

/* Assign
 *
 * 1st bit - filter default
 * 2nd bit - direct defining
 *
 */
assign
	: '='				{ $$ = 1; }
	| T_COLON_ASSIGN	{ $$ = 0; }
	| T_ARROW_ASSIGN	{ $$ = 2; }
	;

field_defval_contents
	: php_expr											{ $$ = $1; }
	| '`' php_expr '`'									{ $$ = $2; }
	| T_TRIPLE_BACKQUOTE php_expr T_TRIPLE_BACKQUOTE	{ $$ = $2; }
	;

php_expr
	: T_LITERAL
	| '$' T_LITERAL
	| php_expr php_expr
	| class_name
	| '(' php_expr ')'
	| php_expr '='
	| '=' php_expr
	| '&' php_expr
	| php_expr '+'
	| php_expr '-'
	| php_expr '*'
	| php_expr '/'
	| php_expr '.'
	| php_expr '%'
	| php_expr '&'
	| php_expr '|'
	| php_expr '^'
	| php_expr '<' '<'
	| php_expr '>' '>'
	| php_expr '*' '*'
	| php_expr '+' '+'
	| php_expr '-' '-'
	| '+' '+' php_expr
	| '-' '-' php_expr
	| php_expr '|' '|'
	| php_expr '&' '&'
	| '+' php_expr
	| '-' php_expr
	| '!' php_expr
	| '~' php_expr
	| php_expr '=' '=' '='
	| php_expr '!' '=' '='
	| php_expr '=' '='
	| php_expr '!' '='
	| php_expr '<' '=' '>'
	| php_expr '<'
	| php_expr '<' '='
	| php_expr '>'
	| php_expr '>' '='
	| '@' php_expr
	| php_expr ':' ':'
	| '[' php_expr ']'
	| '`' php_expr '`'
	| '{' php_expr '}'
	| php_number
	| php_string
	;

php_number
	: '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
	| php_number php_number
	;

php_string
	: '\'' php_string_sq '\''
	| '"' php_string_dq '"'
	;

php_string_sq
	:
	| T_FINAL | T_CLASS | T_EXTENDS | T_IMPLEMENTS | T_DIRECT | T_VAL | T_VAR | T_TRIPLE_BACKQUOTE | T_COLON_ASSIGN | T_ARROW_ASSIGN | T_LITERAL
	| '\1' | '\2' | '\3' | '\4' | '\5' | '\6' | '\7' | '\10' | '\11' | '\12' | '\13' | '\14' | '\15' | '\16' | '\17' | '\20' | '\21' | '\22' | '\23' | '\24' | '\25' | '\26' | '\27' | '\30' | '\31' | '\32' | '\33' | '\34' | '\35' | '\36' | '\37'
	| ' ' | '!' | '"' | '#' | '$' | '%' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | '-' | '.' | '/' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | ':' | ';' | '<' | '=' | '>' | '?' | '@'
	| 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '[' | '\\' | ']' | '^' | '_' | '`'
	| 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | '{' | '|' | '}' | '~'
	| php_string_sq php_string_sq
	;

php_string_dq
	: '{' php_expr '}'
	| php_string_sq
	;

%%

    public function parsePHP(string $code): Node\Expr {
        $value = "<?php $value;";

        $parser = (new ParserFactory())->create(ParserFactory::ONLY_PHP7);
        $ret = $parser->parse($value);

        return $ret[0]->expr;
    }
