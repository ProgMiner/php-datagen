// vim: syntax=yacc noexpandtab

%pure_parser
%expect 6

%token T_FINAL
%token T_CLASS
%token T_EXTENDS
%token T_IMPLEMENTS
%token T_DIRECT
%token T_VAL
%token T_VAR

%token T_TRIPLE_BACKQUOTE
%token T_COLON_ASSIGN
%token T_ARROW_ASSIGN

%token T_STRING
%token T_LITERAL

%%

file
	: file_stmts	{ $$ = new Model\File(['fields' => $1]); }
	;

file_stmts
	:
	| file_stmt				{ $$ = [$1]; }
	| file_stmts file_stmt	{ $1[] = $2; $$ = $1; }
	;

file_stmt
	: class
	;

class
	: class_mods T_CLASS T_LITERAL class_ext_impls '{' class_stmts '}'
		{
			$$ = new Model\Class_([
				'name' => $3,

				'data'       => ($1 & 4) !== false,
				'final'      => ($1 & 1) !== false,
				'finalFinal' => ($1 & 2) !== false,

				'extends'    => $4['extends'],
				'implements' => $4['implements'],

				'fields' => $6
			]);
		}
	;

class_mods
	:				{ $$ = 0; }
	| T_FINAL		{ $$ = 1; }
	| T_FINAL '!'	{ $$ = 3; }
	;

class_ext_impls
	: class_extends class_implements	{ $$ = ['extends' => $1, 'implements' => $2]; }
	| class_implements class_extends	{ $$ = ['extends' => $2, 'implements' => $1]; }
	;

class_extends
	:						{ $$ = null; }
	| T_EXTENDS class_name	{ $$ = $2; }
	;

class_implements
	:								{ $$ = []; }
	| T_IMPLEMENTS class_names_list	{ $$ = $2; }
	;

class_name
	: T_LITERAL
	| '\\' T_LITERAL			{ $$ = '\\'.$2; }
	| class_name '\\' T_LITERAL	{ $$ = $1.'\\'.$3; }
	;

class_names_list
	: class_name						{ $$ = [$1]; }
	| class_names_list ',' class_name	{ $1[] = $3; $$ = $1; }
	;

class_stmts
	:
	| class_stmt				{ $$ = [$1]; }
	| class_stmts class_stmt	{ $1[] = $2; $$ = $1; }
	;

class_stmt
	: field
	;

field
	: field_mods field_keyword T_LITERAL field_type field_defval ';'
		{
			$$ = new Model\Field([
				'name' => $3,

				'editable' => $2,
				'direct'   => ($1 & 1) !== false,

				'type' => $4,

				'directDefining' => ($5['assign'] & 2) !== false,
				'filterDefault'  => ($5['assign'] & 1) !== false,
				'default'        => $this->parsePHP($5['value'])
			];
		}
	;

field_mods
	:			{ $$ = 0; }
	| T_DIRECT	{ $$ = 1; }
	;

field_keyword
	: T_VAL	{ $$ = false; }
	| T_VAR	{ $$ = true; }
	;

field_type
	:						{ $$ = new Type('mixed', false); }
	| ':' field_typename	{ $$ = $2; }
	;

field_typename
	: class_name		{ $$ = new Type($1, false); }
	| class_name '?'	{ $$ = new Type($1, true); }
	;

field_defval
	:	{ $$ = ['assign' => 1, 'value' => null]; }

	| assign field_defval_contents
		{
			$$ = [
				'assign' => $1,
				'value'  => $2,
			];
		}
	;

/* Assign
 *
 * 1st bit - filter default
 * 2nd bit - direct defining
 *
 */
assign
	: '='				{ $$ = 1; }
	| T_COLON_ASSIGN	{ $$ = 0; }
	| T_ARROW_ASSIGN	{ $$ = 2; }
	;

field_defval_contents
	: field_defval_part											{ $$ = $1; }
	| '`' field_defval_part '`'									{ $$ = $2; }
	| T_TRIPLE_BACKQUOTES field_defval_part T_TRIPLE_BACKQUOTES	{ $$ = $2; }
	;

field_defval_part
	: T_DEFVAL_CHAR
	| field_defval_part T_DEFVAL_CHAR	{ $$ = $1.$2; }
	;

%%
